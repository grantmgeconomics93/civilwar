WarName = first(WarName),
WarType = first(WarType),
CcodeA = first(CcodeA),
Country = first(Country),
CcodeB = first(CcodeB),
SideB = first(SideB),
Intnl = first(Intnl),
StartDate = min(StartDate),
EndDate = max(EndDate),
StartMonth1 = month(min(StartDate)),
StartDay1 = day(min(StartDate)),
StartYear1 = year(min(StartDate)),
EndMonth1 = month(max(EndDate)),
EndDay1 = day(max(EndDate)),
EndYear1 = year(max(EndDate))
)
# Merge back into the original data
civilwar <- bind_rows(other_wars, nepal_war_summary)
# Extract the start and end years
civilwar <- civilwar %>%
mutate(StartYear = year(StartDate),
EndYear = year(EndDate))
# Create a new row for each year of the war for each country
civilwar <- civilwar %>%
mutate(year = map2(StartYear, EndYear, seq)) %>%
unnest(year)
# merge two DFs
growthrates$year=growthrates$year%>%as.integer()
mergeddata <- growthrates %>%
left_join(civilwar, by = c("Country", "year"))
# Nepal had two civil war one ended months before the second I decided to treat them as the same war
mergeddata = mergeddata %>%
mutate(WarName = ifelse(WarName == "Second Nepal Maoists", "First Nepal Maoist Insurgency", WarName))
# Assuming 'mergeddata' is your data frame
mergeddata <- mergeddata %>%
group_by(Country) %>%
filter(!all(is.na(WarName)))
#get needed rows
mergeddata <- mergeddata %>%
dplyr::select(year,Country, growth, WarName, StartDate, EndDate, StartYear, EndYear)
mergeddata$decgrowth=mergeddata$growth/100
# Identify earliest year for each country
earliest_years <- mergeddata %>%
group_by(Country) %>%
summarise(earliest_year = min(year), .groups = "drop")
# Identify countries where WarName is not NA in the earliest year
countries_to_remove <- mergeddata %>%
semi_join(earliest_years, by = c("Country" = "Country", "year" = "earliest_year")) %>%
filter(!is.na(WarName)) %>%
pull(Country)
# Filter out these countries from the original dataset
mergeddata <- mergeddata %>%
filter(!(Country %in% countries_to_remove))
mergeddata<- mergeddata %>%
arrange(Country, year) %>%
group_by(Country) %>%
mutate(startwar = ifelse(is.na(dplyr::lag(WarName,1)) & !is.na(WarName), 1, 0))
# Initialize an empty vector to store the cumulative growth
mergeddata$cumulative_growth <- NA
# Loop over each country
for (country in unique(mergeddata$Country)) {
# Get the rows for this country
rows <- which(mergeddata$Country == country)
# Initialize the cumulative growth at 1
cumulative_growth <- 1
# Loop over each row for this country
for (i in rows) {
# Update the cumulative growth, regardless of whether a war starts or not
cumulative_growth <- cumulative_growth * (1 + mergeddata$decgrowth[i])
# Store the cumulative growth
mergeddata$cumulative_growth[i] <- cumulative_growth
}
}
#make a dummy for war
mergeddata <- mergeddata %>%
mutate(war = ifelse(!is.na(WarName), 1, 0))
#make a recovery dummy that is 1 until the year output is 110% of mergeddata$prewwar=ifelse(dplyr::lead(mergeddata$startwar,1)==1& mergeddata$startwar==0,1,0)
# Make a recovery dummy that is 1 until the year output is 125% of prewar output
#mergeddata$prewwar=ifelse(dplyr::lead(mergeddata$startwar,1)==1& mergeddata$startwar==0,1,0)
#mergeddata <- mergeddata %>%
# group_by(Country) %>%
#mutate(pre_war_cumulative_growth = ifelse(war == 0 & dplyr::lag(war, default = 0) == 1, dplyr::lag(cumulative_growth), NA)) %>%
#fill(pre_war_cumulative_growth, .direction = "down") %>%
#mutate(temp = ifelse(is.na(pre_war_cumulative_growth) | cumulative_growth >= pre_war_cumulative_growth * 1.25, 0, 1),
#      above_one_after_war = ifelse(war == 0 & cumulative_growth < pre_war_cumulative_growth * 1.25 & temp == 1, 1, 0)) %>%
#dplyr::select(-temp)
# Identify the pre-war year
mergeddata$prewwar = ifelse(dplyr::lead(mergeddata$startwar, 1) == 1 & mergeddata$startwar == 0, 1, 0)
# Group by country and apply the changes
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(pre_war_cumulative_growth = ifelse(prewwar == 1, cumulative_growth, NA)) %>%
fill(pre_war_cumulative_growth, .direction = "down") %>%
mutate(temp = ifelse(is.na(pre_war_cumulative_growth) | cumulative_growth >= pre_war_cumulative_growth * 1.25, 0, 1),
above_one_after_war = ifelse(war == 0 & cumulative_growth < pre_war_cumulative_growth * 1.25 & temp == 1, 1, 0)) %>%
dplyr::select(-temp)
View(mergeddata)
mergeddata$prewwar=ifelse(dplyr::lead(mergeddata$startwar,1)==1& mergeddata$startwar==0,1,0)
#remove unnecessary data only war
mergeddata=mergeddata%>%filter((prewwar==1)|(war==1)|(above_one_after_war==1))
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(year_since_start = ifelse(war == 1, 0, cumsum(war == 0)))
#plot the recovery one plot
ggplot(mergeddata, aes(x = year_since_start, y = decgrowth, color = Country)) +
geom_line() +
labs(x = "Years Since Start of War", y = "Decadal Growth") +
theme_minimal()
#plot the recovery one plot by country
ggplot(mergeddata, aes(x = year_since_start, y = decgrowth, color = Country)) +
geom_line() +
labs(x = "Years Since Start of War", y = "Decadal Growth") +
theme_minimal() +
facet_wrap(~Country)
# Create lagged variables
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(across(c(growth, war, above_one_after_war, prewwar, year_since_start),
list(lag1 = ~lag(., 1),
lag2 = ~lag(., 2),
lag3 = ~lag(., 3),
lag4 = ~lag(., 4))))
# Drop the first 4 rows for each country to avoid NA values due to lags
mergeddata <- mergeddata %>%
group_by(Country) %>%
slice(-(1:4))
pdf=pdata.frame(mergeddata,index = c("Country","year"))
pdf <- pdf[order(pdf$Country, pdf$year), ]
irf_result <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "startwar",endog_data = "cumulative_growth" ,confint = 1.96 ,hor = 7,lags_exog_data = 4)
plot(irf_result)
irf_result2 <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "war",endog_data = "cumulative_growth",confint = 1.96 ,hor = 7,lags_exog_data = 4)
plot(irf_result2)
irf_result3 <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "above_one_after_war",endog_data= "cumulative_growth",confint = 1.96 ,hor = 7,lags_exog_data = 4)
plot(irf_result3)
library(dplyr)
library(stats)
library(tidyr)
library(purrr)
library(tsibble)
library(forecast)
library(maxLik)
library(stats4)
library(moments)
library(univariateML)
library(readxl)
ip <-read_excel("DP_LIVE_09082023174326289.xlsx",col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"skip"))
View(ip)
usGDPC1_1_ <- read_excel("GDPC1 (1).xlsx")
View(usGDPC1_1_)
options(scipen = 999)
ip <- ip %>%
group_by(LOCATION) %>%
mutate(growthrate = (Value - lag(Value, 1)) / lag(Value, 1))
usGDPC1_1_=usGDPC1_1_ %>%
mutate(growthrate = ( realgdp- lag(realgdp, 1)) / lag(realgdp, 1))
ip <- ip %>%
mutate(TIME = yearmonth(TIME))
ip_ts <- ip %>%
group_by(LOCATION) %>%
slice(-1) %>%
as_tsibble(key = "LOCATION", index = "TIME")
usGDPC1_1_ts <- usGDPC1_1_ %>%
mutate(observation_date = as.Date(observation_date)) %>%
as_tsibble(index = "observation_date", regular = TRUE)
calculate_acf_with_leads <- function(series, lag.max = 6, lead.max = 6) {
# Remove missing values
series <- na.omit(series)
# Calculate ACF for lags
acf_lags <- acf(series, lag.max = lag.max, plot = FALSE)$acf
# Calculate ACF for leads (by reversing the series and calculating lags)
acf_leads <- rev(acf(series[length(series):1], lag.max = lead.max, plot = FALSE)$acf)
# Combine results, excluding the 0 lag from acf_lags as it's already included in acf_leads
combined_acf <- c(acf_leads, acf_lags[-1])
return(combined_acf)
}
lag_max = 6
lead_max = 6
# Calculate average growth rate by location and time
average_growthrate_by_location <- ip %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
# Apply the calculate_acf_with_leads function to the averaged series
acf_with_leads_series1 <- calculate_acf_with_leads(average_growthrate_by_location$growthrate, lag.max = lag_max, lead.max = lead_max)
# Apply the function to the other series
acf_with_leads_series2 <- calculate_acf_with_leads(usGDPC1_1_ts$growthrate, lag.max = lag_max, lead.max = lead_max)
# Define the lags and leads
lags_and_leads <- (-lead_max:lag_max)
# Plot the results for series 1
plot(lags_and_leads, acf_with_leads_series1, type = "l", ylim = c(-1, 1), main = "Comparison of Two Autocorrelations", xlab = "Lag/Lead", ylab = "ACF", col = "black")
# Add the line for series 2
lines(lags_and_leads, acf_with_leads_series2, col = "red")
# Add a legend
legend("topright", legend = c("ip oecd", "usgdpgrowthrate"), col = c("black", "red"), lty = 1)
usgdp_list=usGDPC1_1_%>%drop_na%>%as.list(usGDPC1_1_$growthrate)
dlaplace_standard <- function(x, mu = 0, b = 1) {
if (b <= 0) return(NA)
(1 / (2 * b)) * exp(1)^(-abs(x - mu) / b)
}
fit_standard <- MASS::fitdistr(usgdp_list$growthrate, dlaplace_standard, start = list(mu = 0, b = 1.2))
dlaplace_standard <- function(x, mu = 0, b = 1) {
if (b <= 0) return(NA)
(1 / (2 * b)) * exp(1)^(-abs(x - mu) / b)
}
fit_standard <- MASS::fitdistr(usgdp_list$growthrate, dlaplace_standard, start = list(mu = 0, b = 1))
library(dplyr)
library(stats)
library(tidyr)
library(purrr)
library(tsibble)
library(forecast)
library(maxLik)
library(stats4)
library(moments)
library(univariateML)
library(readxl)
ip <-read_excel("DP_LIVE_09082023174326289.xlsx",col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"skip"))
View(ip)
usGDPC1_1_ <- read_excel("GDPC1 (1).xlsx")
View(usGDPC1_1_)
options(scipen = 999)
ip <- ip %>%
group_by(LOCATION) %>%
mutate(growthrate = (Value - lag(Value, 1)) / lag(Value, 1))
usGDPC1_1_=usGDPC1_1_ %>%
mutate(growthrate = ( realgdp- lag(realgdp, 1)) / lag(realgdp, 1))
ip <- ip %>%
mutate(TIME = yearmonth(TIME))
ip_ts <- ip %>%
group_by(LOCATION) %>%
slice(-1) %>%
as_tsibble(key = "LOCATION", index = "TIME")
usGDPC1_1_ts <- usGDPC1_1_ %>%
mutate(observation_date = as.Date(observation_date)) %>%
as_tsibble(index = "observation_date", regular = TRUE)
calculate_acf_with_leads <- function(series, lag.max = 6, lead.max = 6) {
# Remove missing values
series <- na.omit(series)
# Calculate ACF for lags
acf_lags <- acf(series, lag.max = lag.max, plot = FALSE)$acf
# Calculate ACF for leads (by reversing the series and calculating lags)
acf_leads <- rev(acf(series[length(series):1], lag.max = lead.max, plot = FALSE)$acf)
# Combine results, excluding the 0 lag from acf_lags as it's already included in acf_leads
combined_acf <- c(acf_leads, acf_lags[-1])
return(combined_acf)
}
lag_max = 6
lead_max = 6
# Calculate average growth rate by location and time
average_growthrate_by_location <- ip %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
# Apply the calculate_acf_with_leads function to the averaged series
acf_with_leads_series1 <- calculate_acf_with_leads(average_growthrate_by_location$growthrate, lag.max = lag_max, lead.max = lead_max)
# Apply the function to the other series
acf_with_leads_series2 <- calculate_acf_with_leads(usGDPC1_1_ts$growthrate, lag.max = lag_max, lead.max = lead_max)
# Define the lags and leads
lags_and_leads <- (-lead_max:lag_max)
# Plot the results for series 1
plot(lags_and_leads, acf_with_leads_series1, type = "l", ylim = c(-1, 1), main = "Comparison of Two Autocorrelations", xlab = "Lag/Lead", ylab = "ACF", col = "black")
# Add the line for series 2
lines(lags_and_leads, acf_with_leads_series2, col = "red")
# Add a legend
legend("topright", legend = c("ip oecd", "usgdpgrowthrate"), col = c("black", "red"), lty = 1)
usgdp_list=usGDPC1_1_%>%drop_na%>%as.list(usGDPC1_1_$growthrate)
lag_max = 6
lead_max = 6
# Calculate average growth rate by location and time
average_growthrate_by_location <- ip %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
# Apply the calculate_acf_with_leads function to the averaged series
acf_with_leads_series1 <- calculate_acf_with_leads(average_growthrate_by_location$growthrate, lag.max = lag_max, lead.max = lead_max)
# Apply the function to the other series
acf_with_leads_series2 <- calculate_acf_with_leads(usGDPC1_1_ts$growthrate, lag.max = lag_max, lead.max = lead_max)
# Define the lags and leads
lags_and_leads <- (-lead_max:lag_max)
# Plot the results for series 1
plot(lags_and_leads, acf_with_leads_series1, type = "l", ylim = c(-1, 1), main = "Comparison of Two Autocorrelations", xlab = "Lag/Lead", ylab = "ACF", col = "black")
# Add the line for series 2
lines(lags_and_leads, acf_with_leads_series2, col = "red")
# Add a legend
legend("topright", legend = c("ip oecd", "usgdpgrowthrate"), col = c("black", "red"), lty = 1)
calculate_acf_with_leads <- function(series, lag.max = 6, lead.max = 6) {
# Remove missing values
series <- na.omit(series)
# Calculate ACF for lags
acf_lags <- acf(series, lag.max = lag.max, plot = FALSE)$acf
# Calculate ACF for leads (by reversing the series and calculating lags)
acf_leads <- rev(acf(series[length(series):1], lag.max = lead.max, plot = FALSE)$acf)
# Combine results, excluding the 0 lag from acf_lags as it's already included in acf_leads
combined_acf <- c(acf_leads, acf_lags[-1])
return(combined_acf)
}
lag_max = 6
lead_max = 6
# Calculate average growth rate by location and time
average_growthrate_by_location <- ip %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
# Apply the calculate_acf_with_leads function to the averaged series
acf_with_leads_series1 <- calculate_acf_with_leads(average_growthrate_by_location$growthrate, lag.max = lag_max, lead.max = lead_max)
# Apply the function to the other series
acf_with_leads_series2 <- calculate_acf_with_leads(usGDPC1_1_ts$growthrate, lag.max = lag_max, lead.max = lead_max)
# Define the lags and leads
lags_and_leads <- (-lead_max:lag_max)
# Plot the results for series 1
plot(lags_and_leads, acf_with_leads_series1, type = "l", ylim = c(-1, 1), main = "Comparison of Two Autocorrelations", xlab = "Lag/Lead", ylab = "ACF", col = "black")
# Add the line for series 2
lines(lags_and_leads, acf_with_leads_series2, col = "red")
# Add a legend
legend("topright", legend = c("ip oecd", "usgdpgrowthrate"), col = c("black", "red"), lty = 1)
# Calculate average growth rate by time
average_growthrate_by_time <- ip_ts %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
acf_with_leads_series1
lag_max = 6
lead_max = 6
# Calculate average growth rate by location and time
average_growthrate_by_location <- ip %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
# Apply the calculate_acf_with_leads function to the averaged series
acf_with_leads_series1 <- calculate_acf_with_leads(average_growthrate_by_location$growthrate, lag.max = lag_max, lead.max = lead_max)
# Apply the function to the other series
acf_with_leads_series2 <- calculate_acf_with_leads(usGDPC1_1_ts$growthrate, lag.max = lag_max, lead.max = lead_max)
# Define the lags and leads
lags_and_leads <- (-lead_max:lag_max)
# Plot the results for series 1
plot(lags_and_leads, acf_with_leads_series1, type = "l", ylim = c(-1, 1), main = "Comparison of Two Autocorrelations", xlab = "Lag/Lead", ylab = "ACF", col = "black")
# Add the line for series 2
lines(lags_and_leads, acf_with_leads_series2, col = "red")
# Add a legend
legend("topright", legend = c("ip oecd", "usgdpgrowthrate"), col = c("black", "red"), lty = 1)
acf
acf_with_leads_series1
View(ip_ts)
View(usGDPC1_1_)
View(ip)
ip <- ip %>%
group_by(LOCATION) %>%
mutate(growthrate = (Value - lag(Value, 1)) / lag(Value, 1))
usGDPC1_1_=usGDPC1_1_ %>%
mutate(growthrate = ( realgdp- lag(realgdp, 1)) / lag(realgdp, 1))
library(dplyr)
library(stats)
library(tidyr)
library(purrr)
library(tsibble)
library(forecast)
library(maxLik)
library(stats4)
library(moments)
library(univariateML)
library(readxl)
ip <-read_excel("DP_LIVE_09082023174326289.xlsx",col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"skip"))
View(ip)
usGDPC1_1_ <- read_excel("GDPC1 (1).xlsx")
View(usGDPC1_1_)
options(scipen = 999)
View(ip)
library(readxl)
ip <-read_excel("DP_LIVE_09082023174326289.xlsx",col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"skip"))
View(ip)
usGDPC1_1_ <- read_excel("GDPC1 (1).xlsx")
View(usGDPC1_1_)
options(scipen = 999)
ip <- ip %>%
group_by(LOCATION) %>%
mutate(growthrate = (Value - lag(Value, 1)) / lag(Value, 1))
usGDPC1_1_=usGDPC1_1_ %>%
mutate(growthrate = ( realgdp- lag(realgdp, 1)) / lag(realgdp, 1))
View(usGDPC1_1_)
View(ip)
View(ip)
ip <- ip %>%
group_by(LOCATION) %>%
mutate(growthrate = (Value - lag(Value, 1))) #/ lag(Value, 1))
#usGDPC1_1_=usGDPC1_1_ %>%
# mutate(growthrate = ( realgdp- lag(realgdp, 1)) / lag(realgdp, 1))
View(usGDPC1_1_)
names(usGDPC1_1_)
usGDPC1_1_ <- usGDPC1_1_ %>%
mutate(growthrate = (realgdp - dplyr::lag(realgdp, 1)) / dplyr::lag(realgdp, 1))
ip <- ip %>%
group_by(LOCATION) %>%
mutate(growthrate = (Value - dplyr::lag(Value, 1)) / dplyr::lag(Value, 1))
usGDPC1_1_=usGDPC1_1_ %>%
mutate(growthrate = ( realgdp- dplyr::lag(realgdp, 1)) / dplyr::lag(realgdp, 1))
library(dplyr)
library(stats)
library(tidyr)
library(purrr)
library(tsibble)
library(forecast)
library(maxLik)
library(stats4)
library(moments)
library(univariateML)
library(readxl)
ip <-read_excel("DP_LIVE_09082023174326289.xlsx",col_types = c("text", "text", "text",
"text", "text", "text", "numeric",
"skip"))
View(ip)
usGDPC1_1_ <- read_excel("GDPC1 (1).xlsx")
View(usGDPC1_1_)
options(scipen = 999)
ip <- ip %>%
group_by(LOCATION) %>%
mutate(growthrate = (Value - dplyr::lag(Value, 1)) / dplyr::lag(Value, 1))
usGDPC1_1_=usGDPC1_1_ %>%
mutate(growthrate = ( realgdp- dplyr::lag(realgdp, 1)) / dplyr::lag(realgdp, 1))
ip <- ip %>%
mutate(TIME = yearmonth(TIME))
ip_ts <- ip %>%
group_by(LOCATION) %>%
slice(-1) %>%
as_tsibble(key = "LOCATION", index = "TIME")
usGDPC1_1_ts <- usGDPC1_1_ %>%
mutate(observation_date = as.Date(observation_date)) %>%
as_tsibble(index = "observation_date", regular = TRUE)
calculate_acf_with_leads <- function(series, lag.max = 6, lead.max = 6) {
# Remove missing values
series <- na.omit(series)
# Calculate ACF for lags
acf_lags <- acf(series, lag.max = lag.max, plot = FALSE)$acf
# Calculate ACF for leads (by reversing the series and calculating lags)
acf_leads <- rev(acf(series[length(series):1], lag.max = lead.max, plot = FALSE)$acf)
# Combine results, excluding the 0 lag from acf_lags as it's already included in acf_leads
combined_acf <- c(acf_leads, acf_lags[-1])
return(combined_acf)
}
lag_max = 6
lead_max = 6
# Calculate average growth rate by location and time
average_growthrate_by_location <- ts_ip %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
lag_max = 6
lead_max = 6
# Calculate average growth rate by location and time
average_growthrate_by_location <- ip_ts %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
# Calculate average growth rate by time
average_growthrate_by_time <- ip_ts %>%
group_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
lag_max = 6
lead_max = 6
# Calculate average growth rate by location and time
average_growthrate_by_location <- ip_ts %>%
index_by(TIME) %>%
summarize(growthrate = mean(growthrate, na.rm = TRUE), .groups = "drop")
# Apply the calculate_acf_with_leads function to the averaged series
acf_with_leads_series1 <- calculate_acf_with_leads(average_growthrate_by_location$growthrate, lag.max = lag_max, lead.max = lead_max)
# Apply the function to the other series
acf_with_leads_series2 <- calculate_acf_with_leads(usGDPC1_1_ts$growthrate, lag.max = lag_max, lead.max = lead_max)
# Define the lags and leads
lags_and_leads <- (-lead_max:lag_max)
# Plot the results for series 1
plot(lags_and_leads, acf_with_leads_series1, type = "l", ylim = c(-1, 1), main = "Comparison of Two Autocorrelations", xlab = "Lag/Lead", ylab = "ACF", col = "black")
# Add the line for series 2
lines(lags_and_leads, acf_with_leads_series2, col = "red")
# Add a legend
legend("topright", legend = c("ip oecd", "usgdpgrowthrate"), col = c("black", "red"), lty = 1)
dlaplace_standard <- function(x, mu = 0, b = 1) {
if (b <= 0) return(NA)
(1 / (2 * b)) * exp(1)^(-abs(x - mu) / b)
}
fit_standard <- MASS::fitdistr(usgdp_list$growthrate, dlaplace_standard, start = list(mu = 0, b = 1))
usgdp_list=usGDPC1_1_%>%drop_na%>%as.list(usGDPC1_1_$growthrate)
dlaplace_standard <- function(x, mu = 0, b = 1) {
if (b <= 0) return(NA)
(1 / (2 * b)) * exp(1)^(-abs(x - mu) / b)
}
fit_standard <- MASS::fitdistr(usgdp_list$growthrate, dlaplace_standard, start = list(mu = 0, b = 1))
print(fit_standard)
hist(usgdp_list$growthrate, freq = FALSE, main = "Fit of Laplace Distribution", xlab = "Growth Rate")
curve(dlaplace_standard(x, mu = fit_standard$estimate['mu'], b = fit_standard$estimate['b']), add = TRUE, col = "red")
legend("topright", legend = "Fitted Laplace", col = "red", lty = 1)
#you are like I need to charge him more
dlaplace <- function(x, m=0, a, b=1) {
if(a <= 0 || b <= 0) return(NA)
gamma_val <- gamma(1 + 1/b)
part1 <- 1 / (2 * a * b^(1/b) * gamma_val)
part2 <- exp()^((-1/b) * abs((x - m) / a)^b)
result <- part1 * part2
return(result)
}
usgdpgrowthrate <- # your data here
fit <- MASS::fitdistr(usgdp_list$growthrate, dlaplace, start = list(m = 0.0085194258 , b =0.0073293483 ))
#you are like I need to charge him more
dlaplace <- function(x, m=0, a, b=1) {
if(a <= 0 || b <= 0) return(NA)
gamma_val <- gamma(1 + 1/b)
part1 <- 1 / (2 * a * b^(1/b) * gamma_val)
part2 <- exp()^((-1/b) * abs((x - m) / a)^b)
result <- part1 * part2
return(result)
}
usgdpgrowthrate <- # your data here
fit <- MASS::fitdistr(usgdp_list$growthrate, dlaplace, start = list(m = 0.0085194258 ,a=1 ,b =0.0073293483 ))
plot(usgdp_list)
