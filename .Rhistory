arrange(year) %>%
mutate(growth_3yr_growth = rollapply(growth, width = 3, FUN = mean, align = "right", fill = NA)) %>%
#remove duplicates and NAs
dplyr::select(`Country Name`, year, growth_3yr_growth ) %>%
filter(!is.na(growth_3yr_growth) | !duplicated(growth_3yr_growth))
# Group by 'country', arrange by 'year',  get the years in the right time frame
inequality_2=inequality_%>%filter(reporting_year>1979 &reporting_year<2015)
gini  <- inequality_2 %>%
group_by(country_name) %>%
arrange(reporting_year) %>%
mutate(gini  = gini) %>%
dplyr::select(country_name, reporting_year, gini ) %>%
filter(!is.na(gini))
# Apply the pivot_longer function
income <- gdppcatlas %>%
pivot_longer(cols = -`Country Name`,  # select all columns except the 'country' column
names_to = "year",
values_to = "income")%>%
filter(!is.na(income))
female_ed=female_ed%>%fill(Country)
male_ed=male_ed%>%fill(Country)
# assuming 'df' is your data frame
female_ed <- female_ed[rowSums(is.na(female_ed)) != ncol(female_ed),]
male_ed <- male_ed[rowSums(is.na(male_ed)) != ncol(male_ed),]
#rename education variable to match
female_ed <- rename(female_ed, "Avg. Years of Secondary Schooling F" = "Avg. Years of Secondary Schooling")
male_ed <- rename(male_ed, "Avg. Years of Secondary Schooling M" = "Avg. Years of Secondary Schooling")
#merge to
merged_educ <- merge(female_ed[c("Country", "Year", "Region", "Avg. Years of Secondary Schooling F")],
male_ed[c("Country", "Year", "Region", "Avg. Years of Secondary Schooling M")],
by = c("Country", "Year", "Region")) %>%
# Remove rows where 'Year' is NA
drop_na(Year)
# Assuming df is your data frame, 'Year' is the column with the years, and 'Country' is the column with the countries
merged_educ <- merged_educ %>%
group_by(Country) %>%
complete(Year = min(Year):max(Year)) %>%
fill(everything(), .direction = "down") %>%
ungroup()
# Convert the 'Country' values to lower case and remove leading and trailing white spaces in both dataframes'
colnames(income)[1]="Country"
colnames(merged_educ)[1]="Country"
colnames(merged_educ)[2]="year"
# Merge the dataframes
stage1 <- merge(merged_educ, income, by = c("Country","year"))
# Check the merged dataframe
head(stage1)
colnames(df_3yr_avggrowth)[1]="Country"
colnames(gini)[1]="Country"
colnames(gini)[2]="year"
stage2=merge(df_3yr_avggrowth, gini, by = c("Country","year"))
head(stage2)
colnames(stage1)[2]="year"
stage3<- merge(stage1, stage2, by = c("Country","year"))
colnames(pl_i)[1]="Country"
stage3$Country <- tolower(stage3$Country)
final<- merge(stage3, pl_i, by = c("Country","year"))
final <- final[!duplicated(final[c('Country', 'year')]), ]
head(final)
#make region dummies
final=dummy_cols(final,select_columns = "Region",remove_first_dummy = TRUE)
# Dummies for time periods
final$period_dummy_1980s <- ifelse(final$year >= 1980 & final$year < 1989, 1, 0)
final$period_dummy_1990s <- ifelse(final$year >= 1990 & final$year < 1999, 1, 0)
final$period_dummy_2000s <- ifelse(final$year >= 2000 & final$year < 2010, 1, 0)
final$period_dummy_2010s <- ifelse(final$year >= 2010 , 1, 0)
# Make gini out of 100
final$gini=100*final$gini
pdata <- pdata.frame(final, index = c("Country", "year"))
pdata <- pdata[order(pdata$Country, pdata$year), ]
# Filter out countries with only one occurrence
pdata <- pdata %>%
group_by(Country) %>%
filter(n() > 1)
# Fit a fixed effects model with time and country fixed effects
model <- plm(growth_3yr_growth ~ lag(gini, 1) + lag(log(income), 1) + lag(Avg..Years.of.Secondary.Schooling.M, 1) +
lag(Avg..Years.of.Secondary.Schooling.F, 1) + lag(pl_i, 1)+Region_East.Asia.and.the.Pacific+Region_Europe.and.Central.Asia+Region_Latin.America.and.the.Caribbean+Region_Middle.East.and.North.Africa+Region_South.Asia+Region_Sub.Saharan.Africa+period_dummy_1980s+period_dummy_1990s+period_dummy_2000s,
data = pdata, model = "within", effect = "twoways")
# Extract coefficients and covariance matrix
coef_est <- coef(model)
vcov_est <- vcov(model)
# Compute standard errors
se_est <- sqrt(diag(vcov_est))
# Compute 95% confidence intervals
conf_int1 <- cbind(coef_est - 1.96*se_est, coef_est + 1.96*se_est)
colnames(conf_int1) <- c("Lower", "Upper")
# Display the confidence intervals
print(conf_int1)
# Create a new data frame with lagged variables
new_pdata <- pdata
new_pdata$lag_gini <- lag(pdata$gini, 1)
new_pdata$lag_log_income <- lag(log(pdata$income), 1)
new_pdata$lag_Avg_Years_of_Secondary_Schooling_M <- lag(pdata$Avg..Years.of.Secondary.Schooling.M, 1)
new_pdata$lag_Avg_Years_of_Secondary_Schooling_F <- lag(pdata$Avg..Years.of.Secondary.Schooling.F, 1)
new_pdata$lag_pl_i <- lag(pdata$pl_i, 1)
# Fit an lm model
model_lm <- lm(growth_3yr_growth ~ lag_gini + lag_log_income + lag_Avg_Years_of_Secondary_Schooling_M +
lag_Avg_Years_of_Secondary_Schooling_F + lag_pl_i + Region_East.Asia.and.the.Pacific +
Region_Europe.and.Central.Asia + Region_Latin.America.and.the.Caribbean +
Region_Middle.East.and.North.Africa + Region_South.Asia + Region_Sub.Saharan.Africa +
period_dummy_1980s + period_dummy_1990s + period_dummy_2000s,
data = new_pdata)
# Remove rows with NA values (which were introduced by the lag function)
new_pdata <- na.omit(new_pdata)
vif(model_lm)
# Extract coefficients and covariance matrix
coef_est <- coef(model)
vcov_est <- vcov(model)
# Compute standard errors
se_est <- sqrt(diag(vcov_est))
# Compute 95% confidence intervals
conf_int1 <- cbind(coef_est - 1.96*se_est, coef_est + 1.96*se_est)
colnames(conf_int1) <- c("Lower", "Upper")
# Display the confidence intervals
print(conf_int1)
View(conf_int1)
# Create a new data frame with lagged variables
new_pdata <- pdata
new_pdata$lag_gini <- lag(pdata$gini, 1)
new_pdata$lag_log_income <- lag(log(pdata$income), 1)
new_pdata$lag_Avg_Years_of_Secondary_Schooling_M <- lag(pdata$Avg..Years.of.Secondary.Schooling.M, 1)
new_pdata$lag_Avg_Years_of_Secondary_Schooling_F <- lag(pdata$Avg..Years.of.Secondary.Schooling.F, 1)
new_pdata$lag_pl_i <- lag(pdata$pl_i, 1)
# Fit an lm model
model_lm <- lm(growth_3yr_growth ~ lag_gini + lag_log_income + lag_Avg_Years_of_Secondary_Schooling_M +
lag_Avg_Years_of_Secondary_Schooling_F + lag_pl_i + Region_East.Asia.and.the.Pacific +
Region_Europe.and.Central.Asia + Region_Latin.America.and.the.Caribbean +
Region_Middle.East.and.North.Africa + Region_South.Asia + Region_Sub.Saharan.Africa +
period_dummy_1980s + period_dummy_1990s + period_dummy_2000s,
data = new_pdata)
# Remove rows with NA values (which were introduced by the lag function)
new_pdata <- na.omit(new_pdata)
vif(model_lm)
# Extract coefficients and covariance matrix
coef_est <- coef(model)
vcov_est <- vcov(model)
# Compute standard errors
se_est <- sqrt(diag(vcov_est))
# Compute 95% confidence intervals
conf_int1 <- cbind(coef_est - 1.96*se_est, coef_est + 1.96*se_est)
colnames(conf_int1) <- c("Lower", "Upper")
# Display the confidence intervals
print(conf_int1)
library(readxl)
library(tidyr)
library(dplyr)
library(purrr)
library(lubridate)
library(plm)
library(ggplot2)
library(vars)
library (lpirfs)
crisis <- read_excel("20160923_global_crisis_data.xlsx", na = "n/a")
civilwar <- read_excel("Intra-StateWarData_v4.1.xlsx")
growthrates <- read_excel("growthrates.xlsx")
View(growthrates)
options(scipen=999)
civilwar[sapply(civilwar, is.numeric)] <- lapply(civilwar[sapply(civilwar, is.numeric)], function(x) replace(x, x == -8, NA))
civilwar <- data.frame(lapply(civilwar, function(x) replace(x, x == -8, NA)))
civilwar=filter(civilwar,StartYear1>1950)
civilwar <- civilwar %>%
dplyr::select(WarName:EndYear1)%>%filter((Intnl==0)&(SideA!="United States of America"&SideA!="france"))
civilwar = civilwar %>%
mutate(WarName = ifelse(is.na(WarName), 0, WarName))
civilwar <-filter(civilwar, WarName != "First Philippine-Moro")
civilwar = civilwar %>%
mutate(WarName = ifelse(WarName == "Second Nepal Maoists", "First Nepal Maoist Insurgency", WarName))
colnames(growthrates)[1]="Country"
growthrates=growthrates%>%group_by(Country)%>%pivot_longer(cols = 5:67,names_to = "year",values_to = "growth")%>%drop_na()
colnames(growthrates)[1]="Country"
colnames(civilwar)[4]="Country"
#colnames(Inter_StateWarData_v4_0)[26]="year"
# Convert start and end dates to Date objects
civilwar<- civilwar %>%
mutate(StartDate = as.Date(paste(StartYear1, StartMonth1, StartDay1, sep = "-"), format = "%Y-%m-%d"),
EndDate = as.Date(paste(EndYear1, EndMonth1, EndDay1, sep = "-"), format = "%Y-%m-%d"))
#filter wars without known start and end dates
civilwar <- civilwar %>%
filter(!is.na(StartDate) &!is.na(EndDate))
# Split data
nepal_war <- civilwar %>%
filter(WarName == "First Nepal Maoist Insurgency")
other_wars <- civilwar %>%
filter(WarName != "First Nepal Maoist Insurgency")
# Process the Nepal war data
nepal_war_summary <- nepal_war %>%
summarise(
WarName = first(WarName),
WarType = first(WarType),
CcodeA = first(CcodeA),
Country = first(Country),
CcodeB = first(CcodeB),
SideB = first(SideB),
Intnl = first(Intnl),
StartDate = min(StartDate),
EndDate = max(EndDate),
StartMonth1 = month(min(StartDate)),
StartDay1 = day(min(StartDate)),
StartYear1 = year(min(StartDate)),
EndMonth1 = month(max(EndDate)),
EndDay1 = day(max(EndDate)),
EndYear1 = year(max(EndDate))
)
# Merge back into the original data
civilwar <- bind_rows(other_wars, nepal_war_summary)
# Extract the start and end years
civilwar <- civilwar %>%
mutate(StartYear = year(StartDate),
EndYear = year(EndDate))
# Create a new row for each year of the war for each country
civilwar <- civilwar %>%
mutate(year = map2(StartYear, EndYear, seq)) %>%
unnest(year)
growthrates$year=growthrates$year%>%as.integer()
mergeddata <- growthrates %>%
left_join(civilwar, by = c("Country", "year"))
mergeddata = mergeddata %>%
mutate(WarName = ifelse(WarName == "Second Nepal Maoists", "First Nepal Maoist Insurgency", WarName))
# Assuming 'mergeddata' is your data frame
mergeddata <- mergeddata %>%
group_by(Country) %>%
filter(!all(is.na(WarName)))
mergeddata <- mergeddata %>%
dplyr::select(year,Country, growth, WarName, StartDate, EndDate, StartYear, EndYear)
# First, create a new column that indicates the year of the civil war
#mergeddata <- mergeddata %>%
# arrange(Country, year) %>%
#group_by(Country, WarName) %>%
#mutate(civil_war_year = ifelse(!is.na(WarName), row_number(), NA))
# Then, spread this out into separate columns for each year of the civil war
#mergeddata <- mergeddata %>%
# pivot_wider(names_from = civil_war_year, values_from = civil_war_year,
#            names_prefix = "civil_war_year_", values_fill = 0)
# Replace all non-zero values with 1
#mergeddata[,-(1:8)] <- ifelse(mergeddata[,-(1:8)] > 0, 1, 0)
mergeddata$decgrowth=mergeddata$growth/100
# Identify earliest year for each country
earliest_years <- mergeddata %>%
group_by(Country) %>%
summarise(earliest_year = min(year), .groups = "drop")
# Identify countries where WarName is not NA in the earliest year
countries_to_remove <- mergeddata %>%
semi_join(earliest_years, by = c("Country" = "Country", "year" = "earliest_year")) %>%
filter(!is.na(WarName)) %>%
pull(Country)
# Filter out these countries from the original dataset
mergeddata <- mergeddata %>%
filter(!(Country %in% countries_to_remove))
mergeddata<- mergeddata %>%
arrange(Country, year) %>%
group_by(Country) %>%
mutate(startwar = ifelse(is.na(dplyr::lag(WarName,1)) & !is.na(WarName), 1, 0))
# Initialize an empty vector to store the cumulative growth
mergeddata$cumulative_growth <- NA
# Loop over each country
for (country in unique(mergeddata$Country)) {
# Get the rows for this country
rows <- which(mergeddata$Country == country)
# Initialize the cumulative growth at 1
cumulative_growth <- 1
# Loop over each row for this country
for (i in rows) {
# Update the cumulative growth, regardless of whether a war starts or not
cumulative_growth <- cumulative_growth * (1 + mergeddata$decgrowth[i])
# Store the cumulative growth
mergeddata$cumulative_growth[i] <- cumulative_growth
}
}
#make a dummy for war
mergeddata <- mergeddata %>%
mutate(war = ifelse(!is.na(WarName), 1, 0))
#make a recovery dummy that is 1 until the year output is 110% of prewar output
# Make a recovery dummy that is 1 until the year output is 125% of prewar output
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(pre_war_cumulative_growth = ifelse(war == 0 & dplyr::lag(war, default = 0) == 1, dplyr::lag(cumulative_growth), NA)) %>%
fill(pre_war_cumulative_growth, .direction = "down") %>%
mutate(temp = ifelse(is.na(pre_war_cumulative_growth) | cumulative_growth >= pre_war_cumulative_growth * 1.25, 0, 1),
above_one_after_war = ifelse(war == 0 & cumulative_growth < pre_war_cumulative_growth * 1.25 & temp == 1, 1, 0)) %>%
dplyr::select(-temp)
mergeddata$prewwar=ifelse(dplyr::lead(mergeddata$startwar,1)==1& mergeddata$startwar==0,1,0)
#remove unnecessary data only war
#mergeddata=mergeddata%>%filter((prewwar==1)|(war==1)|(above_one_after_war==1))
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(year_since_start = ifelse(war == 1, 0, cumsum(war == 0)))
#plot the recovery one plot
ggplot(mergeddata, aes(x = year_since_start, y = decgrowth, color = Country)) +
geom_line() +
labs(x = "Years Since Start of War", y = "Decadal Growth") +
theme_minimal()
#plot the recovery one plot by country
ggplot(mergeddata, aes(x = year_since_start, y = decgrowth, color = Country)) +
geom_line() +
labs(x = "Years Since Start of War", y = "Decadal Growth") +
theme_minimal() +
facet_wrap(~Country)
# Create lagged variables
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(across(c(growth, war, above_one_after_war, prewwar, year_since_start),
list(lag1 = ~lag(., 1),
lag2 = ~lag(., 2),
lag3 = ~lag(., 3),
lag4 = ~lag(., 4))))
# Drop the first 4 rows for each country to avoid NA values due to lags
mergeddata <- mergeddata %>%
group_by(Country) %>%
slice(-(1:4))
pdf=pdata.frame(mergeddata,index = c("Country","year"))
pdf <- pdf[order(pdf$Country, pdf$year), ]
# Finish the formula
formula <- as.formula("growth ~ growth_lag1 + growth_lag2 + growth_lag3 + growth_lag4 +war_lag1 + war_lag2 + war_lag3 + war_lag4 + above_one_after_war_lag1 + above_one_after_war_lag2 + above_one_after_war_lag3 + above_one_after_war_lag4 +prewwar_lag1 + prewwar_lag2 + prewwar_lag3 + prewwar_lag4 + year_since_start_lag1 + year_since_start_lag2 + year_since_start_lag3 + year_since_start_lag4")
# Estimate the model
model <- plm(formula, data = pdf, model = "within",index = c("country","year"))
irf_result <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "startwar",endog_data = "growth" ,confint = 1.96 ,hor = 7)
plot(irf_result)
irf_result2 <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "war",endog_data = "cumulative_growth",confint = 1.96 ,hor = 7)
plot(irf_result2)
irf_result3 <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "above_one_after_war",endog_data = "cumulative_growth" ,confint = 1.96 ,hor = 7)
plot(irf_result3)
irf_result3 <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "above_one_after_war",endog_data = "cumulative_growth" ,confint = 1.96 ,hor = 10)
plot(irf_result3)
irf_result2 <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "war",endog_data = "cumulative_growth",confint = 1.96 ,hor = 10)
plot(irf_result2)
irf_result <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "startwar",endog_data = "growth" ,confint = 1.96 ,hor = 10)
plot(irf_result)
library(readxl)
library(tidyr)
library(dplyr)
library(purrr)
library(lubridate)
library(plm)
library(ggplot2)
library(vars)
library (lpirfs)
crisis <- read_excel("20160923_global_crisis_data.xlsx", na = "n/a")
civilwar <- read_excel("Intra-StateWarData_v4.1.xlsx")
growthrates <- read_excel("growthrates.xlsx")
View(growthrates)
options(scipen=999)
civilwar[sapply(civilwar, is.numeric)] <- lapply(civilwar[sapply(civilwar, is.numeric)], function(x) replace(x, x == -8, NA))
civilwar <- data.frame(lapply(civilwar, function(x) replace(x, x == -8, NA)))
civilwar=filter(civilwar,StartYear1>1950)
# get civil war information information I want
civilwar <- civilwar %>%
dplyr::select(WarName:EndYear1)%>%filter((Intnl==0)&(SideA!="United States of America"&SideA!="france"))
# get rid of  "First Philippine-Moro" war the Philippines were in two wars at the same time I got rid of the smaller one
civilwar = civilwar %>%
mutate(WarName = ifelse(is.na(WarName), 0, WarName))
civilwar <-filter(civilwar, WarName != "First Philippine-Moro")
civilwar = civilwar %>%
mutate(WarName = ifelse(WarName == "Second Nepal Maoists", "First Nepal Maoist Insurgency", WarName))
#get ready to merge
colnames(growthrates)[1]="Country"
growthrates=growthrates%>%group_by(Country)%>%pivot_longer(cols = 5:67,names_to = "year",values_to = "growth")%>%drop_na()
colnames(growthrates)[1]="Country"
colnames(civilwar)[4]="Country"
#colnames(Inter_StateWarData_v4_0)[26]="year"
# Convert start and end dates to Date objects
civilwar<- civilwar %>%
mutate(StartDate = as.Date(paste(StartYear1, StartMonth1, StartDay1, sep = "-"), format = "%Y-%m-%d"),
EndDate = as.Date(paste(EndYear1, EndMonth1, EndDay1, sep = "-"), format = "%Y-%m-%d"))
#filter wars without known start and end dates
civilwar <- civilwar %>%
filter(!is.na(StartDate) &!is.na(EndDate))
#treat the two civil wars as the same
# Split data
nepal_war <- civilwar %>%
filter(WarName == "First Nepal Maoist Insurgency")
other_wars <- civilwar %>%
filter(WarName != "First Nepal Maoist Insurgency")
# Process the Nepal war data
nepal_war_summary <- nepal_war %>%
summarise(
WarName = first(WarName),
WarType = first(WarType),
CcodeA = first(CcodeA),
Country = first(Country),
CcodeB = first(CcodeB),
SideB = first(SideB),
Intnl = first(Intnl),
StartDate = min(StartDate),
EndDate = max(EndDate),
StartMonth1 = month(min(StartDate)),
StartDay1 = day(min(StartDate)),
StartYear1 = year(min(StartDate)),
EndMonth1 = month(max(EndDate)),
EndDay1 = day(max(EndDate)),
EndYear1 = year(max(EndDate))
)
# Merge back into the original data
civilwar <- bind_rows(other_wars, nepal_war_summary)
# Extract the start and end years
civilwar <- civilwar %>%
mutate(StartYear = year(StartDate),
EndYear = year(EndDate))
# Create a new row for each year of the war for each country
civilwar <- civilwar %>%
mutate(year = map2(StartYear, EndYear, seq)) %>%
unnest(year)
# merge two DFs
growthrates$year=growthrates$year%>%as.integer()
mergeddata <- growthrates %>%
left_join(civilwar, by = c("Country", "year"))
# Nepal had two civil war one ended months before the second I decided to treat them as the same war
mergeddata = mergeddata %>%
mutate(WarName = ifelse(WarName == "Second Nepal Maoists", "First Nepal Maoist Insurgency", WarName))
# Assuming 'mergeddata' is your data frame
mergeddata <- mergeddata %>%
group_by(Country) %>%
filter(!all(is.na(WarName)))
#get needed rows
mergeddata <- mergeddata %>%
dplyr::select(year,Country, growth, WarName, StartDate, EndDate, StartYear, EndYear)
# First, create a new column that indicates the year of the civil war
#mergeddata <- mergeddata %>%
# arrange(Country, year) %>%
#group_by(Country, WarName) %>%
#mutate(civil_war_year = ifelse(!is.na(WarName), row_number(), NA))
# Then, spread this out into separate columns for each year of the civil war
#mergeddata <- mergeddata %>%
# pivot_wider(names_from = civil_war_year, values_from = civil_war_year,
#            names_prefix = "civil_war_year_", values_fill = 0)
# Replace all non-zero values with 1
#mergeddata[,-(1:8)] <- ifelse(mergeddata[,-(1:8)] > 0, 1, 0)
mergeddata$decgrowth=mergeddata$growth/100
# Identify earliest year for each country
earliest_years <- mergeddata %>%
group_by(Country) %>%
summarise(earliest_year = min(year), .groups = "drop")
# Identify countries where WarName is not NA in the earliest year
countries_to_remove <- mergeddata %>%
semi_join(earliest_years, by = c("Country" = "Country", "year" = "earliest_year")) %>%
filter(!is.na(WarName)) %>%
pull(Country)
# Filter out these countries from the original dataset
mergeddata <- mergeddata %>%
filter(!(Country %in% countries_to_remove))
mergeddata<- mergeddata %>%
arrange(Country, year) %>%
group_by(Country) %>%
mutate(startwar = ifelse(is.na(dplyr::lag(WarName,1)) & !is.na(WarName), 1, 0))
# Initialize an empty vector to store the cumulative growth
mergeddata$cumulative_growth <- NA
# Loop over each country
for (country in unique(mergeddata$Country)) {
# Get the rows for this country
rows <- which(mergeddata$Country == country)
# Initialize the cumulative growth at 1
cumulative_growth <- 1
# Loop over each row for this country
for (i in rows) {
# Update the cumulative growth, regardless of whether a war starts or not
cumulative_growth <- cumulative_growth * (1 + mergeddata$decgrowth[i])
# Store the cumulative growth
mergeddata$cumulative_growth[i] <- cumulative_growth
}
}
#make a dummy for war
mergeddata <- mergeddata %>%
mutate(war = ifelse(!is.na(WarName), 1, 0))
#make a recovery dummy that is 1 until the year output is 110% of prewar output
# Make a recovery dummy that is 1 until the year output is 125% of prewar output
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(pre_war_cumulative_growth = ifelse(war == 0 & dplyr::lag(war, default = 0) == 1, dplyr::lag(cumulative_growth), NA)) %>%
fill(pre_war_cumulative_growth, .direction = "down") %>%
mutate(temp = ifelse(is.na(pre_war_cumulative_growth) | cumulative_growth >= pre_war_cumulative_growth * 1.25, 0, 1),
above_one_after_war = ifelse(war == 0 & cumulative_growth < pre_war_cumulative_growth * 1.25 & temp == 1, 1, 0)) %>%
dplyr::select(-temp)
mergeddata$prewwar=ifelse(dplyr::lead(mergeddata$startwar,1)==1& mergeddata$startwar==0,1,0)
#remove unnecessary data only war
#mergeddata=mergeddata%>%filter((prewwar==1)|(war==1)|(above_one_after_war==1))
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(year_since_start = ifelse(war == 1, 0, cumsum(war == 0)))
#plot the recovery one plot
ggplot(mergeddata, aes(x = year_since_start, y = decgrowth, color = Country)) +
geom_line() +
labs(x = "Years Since Start of War", y = "Decadal Growth") +
theme_minimal()
#plot the recovery one plot by country
ggplot(mergeddata, aes(x = year_since_start, y = decgrowth, color = Country)) +
geom_line() +
labs(x = "Years Since Start of War", y = "Decadal Growth") +
theme_minimal() +
facet_wrap(~Country)
# Create lagged variables
mergeddata <- mergeddata %>%
group_by(Country) %>%
mutate(across(c(growth, war, above_one_after_war, prewwar, year_since_start),
list(lag1 = ~lag(., 1),
lag2 = ~lag(., 2),
lag3 = ~lag(., 3),
lag4 = ~lag(., 4))))
# Drop the first 4 rows for each country to avoid NA values due to lags
mergeddata <- mergeddata %>%
group_by(Country) %>%
slice(-(1:4))
pdf=pdata.frame(mergeddata,index = c("Country","year"))
pdf <- pdf[order(pdf$Country, pdf$year), ]
# Finish the formula
formula <- as.formula("growth ~ growth_lag1 + growth_lag2 + growth_lag3 + growth_lag4 +war_lag1 + war_lag2 + war_lag3 + war_lag4 + above_one_after_war_lag1 + above_one_after_war_lag2 + above_one_after_war_lag3 + above_one_after_war_lag4 +prewwar_lag1 + prewwar_lag2 + prewwar_lag3 + prewwar_lag4 + year_since_start_lag1 + year_since_start_lag2 + year_since_start_lag3 + year_since_start_lag4")
# Estimate the model
model <- plm(formula, data = pdf, model = "within",index = c("country","year"))
irf_result <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "startwar",endog_data = "growth" ,confint = 1.96 ,hor = 10)
plot(irf_result)
irf_result2 <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "war",endog_data = "cumulative_growth",confint = 1.96 ,hor = 10)
plot(irf_result2)
irf_result3 <- lp_lin_panel(data_set = pdf,data_sample ="Full",shock = "above_one_after_war",endog_data = "cumulative_growth" ,confint = 1.96 ,hor = 10)
plot(irf_result3)
